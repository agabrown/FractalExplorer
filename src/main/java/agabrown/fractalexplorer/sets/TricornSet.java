package agabrown.fractalexplorer.sets;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the Tricorn or Mandelbar set in which the set is generated by iterating the conjugate of z in the
 * Mandelbrot equation.
 *
 * @author agabrown Aug 2014 - Sep 2021
 */
public final class TricornSet implements FractalSet {

    /**
     * Upper limit on magnitude of the complex numbers that can belong to the TricornSet set.
     */
    private static final double BOUND = 2.0;

    /**
     * Upper limit on square of the magnitude of the complex numbers that can belong to the Tricorn set.
     */
    private static final double BOUND_SQUARE = BOUND * BOUND;

    /**
     * The name of this fractal set.
     */
    private static final String NAME = "Tricorn set";

    /*
     * (non-Javadoc)
     *
     * @see agabrown.fractalexplorer.sets.FractalSet#isPointInSet(double, double,
     * int)
     */
    @Override
    public boolean isPointInSet(final double real, final double imaginary, final int maxIter) {
        return iterateSeries(real, imaginary, maxIter) >= maxIter;
    }

    /*
     * (non-Javadoc)
     *
     * @see
     * agabrown.fractalexplorer.sets.FractalSet#numberOfIterationsForPoint(double,
     * double, int)
     */
    @Override
    public int numberOfIterationsForPoint(final double real, final double imaginary, final int maxIter) {
        return iterateSeries(real, imaginary, maxIter);
    }

    /*
     * (non-Javadoc)
     *
     * @see agabrown.fractalexplorer.sets.FractalSet#getName()
     */
    @Override
    public String getName() {
        return NAME;
    }

    /*
     * (non-Javadoc)
     *
     * @see agabrown.fractalexplorer.sets.FractalSet#getInfoLines()
     */
    @Override
    public List<String> getInfoLines() {
        return new ArrayList<>(0);
    }

    /**
     * Check if the complex input number c is in the TricornSet set. Use the fast approach using doubles and the worked
     * out formula for updating the complex number series.
     *
     * @param cReal      Real part of complex number to check
     * @param cImaginary Imaginary part of complex number to check
     * @param maxIter    Maximum number of iterations to decide on whether the number is in the set. Numbers for which
     *                   maxIter is exceeded are considered to be part of the set.
     * @return Number of iterations used.
     */
    private int iterateSeries(final double cReal, final double cImaginary, final int maxIter) {
        int iter = 0;
        double zReal = cReal;
        double zImaginary = cImaginary;
        double zRealTemp;
        while (zReal * zReal + zImaginary * zImaginary <= BOUND_SQUARE && iter < maxIter) {
            zRealTemp = zReal * zReal - zImaginary * zImaginary + cReal;
            zImaginary = -2.0 * zReal * zImaginary + cImaginary;
            zReal = zRealTemp;
            iter = iter + 1;
        }
        return iter;
    }

}
